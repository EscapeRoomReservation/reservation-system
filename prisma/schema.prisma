// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id        String  @id @default(cuid())
  name      String
  address   String
  owner     User    @relation(fields: [ownerId], references: [id])
  ownerId   String
  rooms     Room[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id          String    @id @default(cuid())
  location    Location  @relation(fields: [locationId], references: [id])
  locationId  String
  name        String
  description String
  capacity    Int
  price       Float
  duration    Int // in minutes
  bookings    Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id            String        @id @default(cuid())
  room          Room          @relation(fields: [roomId], references: [id])
  roomId        String
  startTime     DateTime
  endTime       DateTime
  customerName  String
  customerEmail String
  status        BookingStatus @default(PENDING)

  userId        String?
  user          User?         @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  locations     Location[]
  bookings      Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Role {
  USER
  OWNER
  ADMIN
}
